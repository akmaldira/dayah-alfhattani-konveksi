// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/lib/prisma/generated"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ROOT
  ADMIN
  USER
}

enum StockMutationType {
  IN
  OUT
  ADJUSTMENT
}

enum TransactionType {
  INCOME
  EXPENSE
  ADJUSTMENT
}

enum CashAuditLogType {
  INCOME
  EXPENSE
  ADJUSTMENT
}

model User {
  id             String          @id @default(cuid())
  name           String?
  email          String          @unique
  password       String
  image          String?
  role           UserRole        @default(USER)
  createdAt      DateTime        @default(now()) @map("created_at")
  updatedAt      DateTime        @updatedAt @map("updated_at")
  sessions       Session[]
  items          Item[]
  stockMutations StockMutation[]
  transactions   Transaction[]
  cashAuditLogs  CashAuditLog[]

  @@map("user")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_token")
}

model Item {
  id          String           @id @default(cuid())
  name        String
  uniqueName  String           @unique @map("unique_name")
  defaultUnit String           @map("default_unit")
  variants    Variant[]
  conversions UnitConversion[]
  createdById String           @map("created_by_id")
  createdBy   User             @relation(fields: [createdById], references: [id])
  createdAt   DateTime         @default(now()) @map("created_at")
  updatedAt   DateTime         @updatedAt @map("updated_at")

  @@map("item")
}

model Variant {
  id             String          @id @default(cuid())
  item           Item            @relation(fields: [itemId], references: [id])
  itemId         String          @map("item_id")
  name           String // e.g. Black, White, Overlock
  unit           String // e.g. meter, pcs
  currentStock   Float           @default(0) @map("current_stock")
  stockMutations StockMutation[]
  createdAt      DateTime        @default(now()) @map("created_at")
  updatedAt      DateTime        @updatedAt @map("updated_at")

  @@map("variant")
}

model UnitConversion {
  id         String   @id @default(cuid())
  item       Item     @relation(fields: [itemId], references: [id])
  itemId     String   @map("item_id")
  fromUnit   String   @map("from_unit") // e.g. "ball"
  toUnit     String   @map("to_unit") // e.g. "meter"
  multiplier Float    @map("multiplier") // e.g. 1 ball = 12 meter â†’ multiplier = 12
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@unique([itemId, fromUnit, toUnit])
  @@map("unit_conversion")
}

model StockMutation {
  id              String            @id @default(cuid())
  variant         Variant           @relation(fields: [variantId], references: [id])
  variantId       String            @map("variant_id")
  type            StockMutationType // IN | OUT | ADJUSTMENT
  quantity        Float // always in base unit
  unit            String // e.g. "meter"
  note            String?
  source          String? // e.g. "Purchase", "Used for Production"
  createdById     String            @map("created_by_id")
  createdBy       User              @relation(fields: [createdById], references: [id])
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @updatedAt @map("updated_at")
  transactionItem TransactionItem?

  @@map("stock_mutation")
}

model CashBalance {
  id        Int      @id @default(1)
  balance   Float    @default(0)
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("cash_balance")
}

model CashAuditLog {
  id              String          @id @default(cuid())
  amount          Float
  previousBalance Float           @map("previous_balance")
  nextBalance     Float           @map("next_balance")
  type            TransactionType
  note            String?
  createdAt       DateTime        @default(now()) @map("created_at")
  updatedAt       DateTime        @updatedAt @map("updated_at")
  createdBy       User            @relation(fields: [createdById], references: [id])
  createdById     String          @map("created_by_id")
  transaction     Transaction?

  @@map("cash_audit_log")
}

model Transaction {
  id          String            @id @default(cuid())
  type        TransactionType
  totalAmount Float             @map("total_amount")
  source      String?
  note        String?
  createdAt   DateTime          @default(now()) @map("created_at")
  updatedAt   DateTime          @updatedAt @map("updated_at")
  createdBy   User              @relation(fields: [createdById], references: [id])
  createdById String            @map("created_by_id")
  auditLogId  String?           @unique @map("audit_log_id")
  auditLog    CashAuditLog?     @relation(fields: [auditLogId], references: [id])
  items       TransactionItem[]

  @@map("transaction")
}

model TransactionItem {
  id            String         @id @default(cuid())
  transactionId String         @map("transaction_id")
  transaction   Transaction    @relation(fields: [transactionId], references: [id])
  mutationId    String?        @unique @map("mutation_id")
  mutation      StockMutation? @relation(fields: [mutationId], references: [id])
  name          String
  quantity      Float
  unit          String?
  supplier      String?
  totalPrice    Float          @map("total_price")
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")

  @@map("transaction_item")
}
